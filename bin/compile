#!/usr/bin/env bash
#
#   Perform transformation steps for this Heroku app.
#
#   usage: bin/compile /tmp/build /app/cache /app/env
#
#   Reference: https://devcenter.heroku.com/articles/buildpack-api

#   Debugging.
#DISABLED:set -x

#   Configure environment.
set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
set -o nounset    # fail on unset variables
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

#   Display a section header.
function section() {
    echo
    echo "-----> $1"
}

#   Indent output send to stdout.
function indent() {
  sed -u 's/^/       /'
}

#   Remove a directory tree.
function rmtree() {
    dir_name=$1
    if [ -d "${dir_name}" ]; then
        echo "WARNING: found an existing directory ${dir_name}, removing it"
        rm -rf ${dir_name} | indent
    fi | indent
}

function export_env_dir() {
    env_dir=$1
    if [ -d "$env_dir" ]; then
        for name in $(ls ${env_dir}); do
            echo "$name"
            export "$name=$(cat ${env_dir}/${name})"
        done
    fi
}

section "running build"

#   Script paths.
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

#   Build path (directory contents will form the home directory on the deployed app).
BUILD_DIR=${1:-}

#   Location for build artifacts (will be persisted between builds).
CACHE_DIR=${2:-}

#   Directory containing a file for each of the app's configuration variables.
ENV_DIR=${3:-}

#   Introduce configuration settings to environment.
#DISABLED:export_env_dir $ENV_DIR

VENDOR_DIR="${BP_DIR}/vendor"
AUTOSSH_TARBALL="${VENDOR_DIR}/autossh-1.4e.tgz"
AUTOSSH_VERSION="autossh-1.4e"
AUTOSSH_WORKING_DIR="${CACHE_DIR}/autossh/${AUTOSSH_VERSION}"
AUTOSSH_INSTALL_DIR="${BUILD_DIR}/.heroku/bin"

function download_autossh() {
    echo "extracting autossh" | indent
    tar xf ${AUTOSSH_TARBALL} -C ${CACHE_DIR}/autossh
}

function build_autossh() {
    echo "building autossh" | indent
    cd ${AUTOSSH_WORKING_DIR}
    ./configure --quiet
    make --quiet
}

function cleanup() {
    echo "cleaning up" | indent
    find ${AUTOSSH_WORKING_DIR} -type f  | grep -v "autossh$" | xargs rm
}

function install_autossh() {
    cp ${AUTOSSH_WORKING_DIR}/autossh ${AUTOSSH_INSTALL_DIR}
    chmod +x ${AUTOSSH_INSTALL_DIR}/autossh
    echo "installation successful" | indent
}

section "installing autossh"

mkdir -p "${AUTOSSH_INSTALL_DIR}"
mkdir -p "${CACHE_DIR}/autossh"

cd ${BUILD_DIR}
echo "installing profile.d scripts"
mkdir -p "${BUILD_DIR}/.profile.d"
cp ${BP_DIR}/profile/*.sh ${BUILD_DIR}/.profile.d/

if [ ! -f "${AUTOSSH_WORKING_DIR}/autossh" ]; then
    download_autossh
    build_autossh
    cleanup
fi

install_autossh
